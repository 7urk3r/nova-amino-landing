---
// Your beautiful original footer restored exactly as it was!
// CMS wiring: read footer link mapping and FAQ content, then hydrate dropdowns
import { q } from '../../lib/sanityServer'

type QA = { question: string; answer: string; slug?: string }

let footerDoc: any = null
let faq: { sections?: Array<{ sectionTitle: string; questions: QA[] }> } | null = null

try {
  footerDoc = await q(`*[_type=="footer"][0]{
    sections{
      learn{links[]{title,linkType,faqSlug,hasExpandableContent,expandableContent}},
      support{links[]{title,linkType,faqSlug,hasExpandableContent,expandableContent}},
      company{links[]{title,linkType,faqSlug,hasExpandableContent,expandableContent}}
    }
  }`)
} catch {}

try {
  const lp = await q(`*[_type=="landingPage"]|order(_updatedAt desc)[0]{
    faq{sections[]{sectionTitle, questions[]{question, answer, "slug": slug.current}}}
  }`)
  faq = lp?.faq || null
} catch {}

function findAnswerBySlug(slug?: string): QA | null {
  if (!slug || !faq?.sections) return null
  for (const sec of faq.sections) {
    for (const q of sec.questions || []) {
      if (q?.slug === slug) return q
    }
  }
  return null
}

function findSection(titleIncludes: string): QA[] {
  const res: QA[] = []
  if (!faq?.sections) return res
  for (const sec of faq.sections) {
    if (sec.sectionTitle && sec.sectionTitle.toLowerCase().includes(titleIncludes.toLowerCase())) {
      res.push(...(sec.questions || []))
    }
  }
  return res
}

const learnLinks = footerDoc?.sections?.learn?.links || []
const supportLinks = footerDoc?.sections?.support?.links || []
const companyLinks = footerDoc?.sections?.company?.links || []

const storageSlug = learnLinks.find((l: any)=> (l?.title||'').toLowerCase()==='storage guide')?.faqSlug
const qualitySlug = learnLinks.find((l: any)=> (l?.title||'').toLowerCase()==='quality & testing')?.faqSlug
const termsSlug = companyLinks.find((l: any)=> (l?.title||'').toLowerCase()==='terms of service')?.faqSlug
const privacySlug = companyLinks.find((l: any)=> (l?.title||'').toLowerCase()==='privacy policy')?.faqSlug

// Prefer explicit expandableContent text from the footer doc; fallback to FAQ answer
function makeQAFrom(link: any, qa: any): QA | null {
  if (link?.hasExpandableContent && link?.expandableContent) {
    return { question: link.title, answer: link.expandableContent }
  }
  return qa || null
}

const learnStorageLink = learnLinks.find((l: any)=> (l?.title||'').toLowerCase()==='storage guide')
const learnQualityLink = learnLinks.find((l: any)=> (l?.title||'').toLowerCase()==='quality & testing')
const companyTermsLink = companyLinks.find((l: any)=> (l?.title||'').toLowerCase()==='terms of service')
const companyPrivacyLink = companyLinks.find((l: any)=> (l?.title||'').toLowerCase()==='privacy policy')

const storageQA = makeQAFrom(learnStorageLink, findAnswerBySlug(storageSlug))
const qualityQA = makeQAFrom(learnQualityLink, findAnswerBySlug(qualitySlug))
const termsQA = makeQAFrom(companyTermsLink, findAnswerBySlug(termsSlug))
const privacyQA = makeQAFrom(companyPrivacyLink, findAnswerBySlug(privacySlug))

// Shipping panel: gather multiple Q&A from the Shipping section
const shippingQAsAll = findSection('Shipping')
let shippingQAs = shippingQAsAll.filter(q=>/where do you ship from|how quickly|shipping protection/i.test(q.question)).slice(0,3)
// If footer Support->Shipping has explicit text, use it as single block
const supportShippingLink = supportLinks.find((l: any)=> (l?.title||'').toLowerCase()==='shipping')
if (supportShippingLink?.hasExpandableContent && supportShippingLink?.expandableContent) {
  shippingQAs = [{ question: supportShippingLink.title, answer: supportShippingLink.expandableContent }]
}
---

<!-- Nova Amino Footer Component -->
<footer style="padding: 1rem 0 0.5rem; overflow: visible;">
  <div style="max-width: 100%; padding-inline: var(--space-7, 56px); margin-inline: 0; overflow: visible;">
    <div style="background: black; border-radius: 1rem; padding: 2rem; color: #e5e7eb; overflow: visible;">
      <!-- Footer Links Grid -->
      <div style="display: grid; width: 100%; grid-template-columns: repeat(4, 1fr); gap: 2.5rem; justify-items: start; text-align: left; padding: 0 1.5rem 0 8rem;">

          <!-- SHOP -->
          <div>
            <h4 style="text-transform: uppercase; font-size: 0.875rem; font-weight: 600; margin-bottom: 1rem; color: #9ca3af;">SHOP</h4>
            <ul style="list-style: none; padding: 0; margin: 0;">
              <li style="margin-bottom: 0.5rem;"><a href="/products" style="color: inherit; text-decoration: none; transition: color 0.2s;" onmouseover="this.style.color='white'" onmouseout="this.style.color='#e5e7eb'">All Peptides</a></li>
              <li style="margin-bottom: 0.5rem;"><a href="/#featured-products" style="color: inherit; text-decoration: none; transition: color 0.2s;" onmouseover="this.style.color='white'" onmouseout="this.style.color='#e5e7eb'">Featured Compounds</a></li>
            </ul>
          </div>

          <!-- LEARN -->
          <div>
            <h4 style="text-transform: uppercase; font-size: 0.875rem; font-weight: 600; margin-bottom: 1rem; color: #9ca3af;">LEARN</h4>
            <ul style="list-style: none; padding: 0; margin: 0;">
              <li style="margin-bottom: 0.5rem;">
                <button data-expand="storage" style="color: inherit; text-decoration: none; transition: color 0.2s; background: none; border: none; padding: 0; display: flex; align-items: center; gap: 0.5rem; text-align: left; cursor: pointer; font-size: 1rem;" onmouseover="this.style.color='white'" onmouseout="this.style.color='#e5e7eb'">
                  Storage Guide
                  <svg style="width: 1rem; height: 1rem; transition: transform 0.2s;" id="chevron-storage" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="6,9 12,15 18,9"></polyline>
                  </svg>
                </button>
              </li>
              <li style="margin-bottom: 0.5rem;">
                <button data-expand="quality" style="color: inherit; text-decoration: none; transition: color 0.2s; background: none; border: none; padding: 0; display: flex; align-items: center; gap: 0.5rem; text-align: left; cursor: pointer; font-size: 1rem;" onmouseover="this.style.color='white'" onmouseout="this.style.color='#e5e7eb'">
                  Quality & Testing
                  <svg style="width: 1rem; height: 1rem; transition: transform 0.2s;" id="chevron-quality" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="6,9 12,15 18,9"></polyline>
                  </svg>
                </button>
              </li>
              <li style="margin-bottom: 0.5rem;"><a href="#faq" style="color: inherit; text-decoration: none; transition: color 0.2s;" onmouseover="this.style.color='white'" onmouseout="this.style.color='#e5e7eb'">FAQ</a></li>
            </ul>
          </div>

          <!-- SUPPORT -->
          <div>
            <h4 style="text-transform: uppercase; font-size: 0.875rem; font-weight: 600; margin-bottom: 1rem; color: #9ca3af;">SUPPORT</h4>
            <ul style="list-style: none; padding: 0; margin: 0;">
              <li style="margin-bottom: 0.5rem;"><a href="/account/orders" style="color: inherit; text-decoration: none; transition: color 0.2s;" onmouseover="this.style.color='white'" onmouseout="this.style.color='#e5e7eb'">Track Order</a></li>
              <li style="margin-bottom: 0.5rem;">
                <button data-expand="shipping" style="color: inherit; text-decoration: none; transition: color 0.2s; background: none; border: none; padding: 0; display: flex; align-items: center; gap: 0.5rem; text-align: left; cursor: pointer; font-size: 1rem;" onmouseover="this.style.color='white'" onmouseout="this.style.color='#e5e7eb'">
                  Shipping
                  <svg style="width: 1rem; height: 1rem; transition: transform 0.2s;" id="chevron-shipping" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="6,9 12,15 18,9"></polyline>
                  </svg>
                </button>
              </li>
              <li style="margin-bottom: 0.5rem;">
                <button data-expand="contact" style="color: inherit; text-decoration: none; transition: color 0.2s; background: none; border: none; padding: 0; display: flex; align-items: center; gap: 0.5rem; text-align: left; cursor: pointer; font-size: 1rem;" onmouseover="this.style.color='white'" onmouseout="this.style.color='#e5e7eb'">
                  Contact Us
                  <svg style="width: 1rem; height: 1rem; transition: transform 0.2s;" id="chevron-contact" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="6,9 12,15 18,9"></polyline>
                  </svg>
                </button>
              </li>
            </ul>
          </div>

          <!-- COMPANY -->
          <div>
            <h4 style="text-transform: uppercase; font-size: 0.875rem; font-weight: 600; margin-bottom: 1rem; color: #9ca3af;">COMPANY</h4>
            <ul style="list-style: none; padding: 0; margin: 0;">
              <li style="margin-bottom: 0.5rem;">
                <button data-expand="terms" style="color: inherit; text-decoration: none; transition: color 0.2s; background: none; border: none; padding: 0; display: flex; align-items: center; gap: 0.5rem; text-align: left; cursor: pointer; font-size: 1rem;" onmouseover="this.style.color='white'" onmouseout="this.style.color='#e5e7eb'">
                  Terms of Service
                  <svg style="width: 1rem; height: 1rem; transition: transform 0.2s;" id="chevron-terms" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="6,9 12,15 18,9"></polyline>
                  </svg>
                </button>
              </li>
              <li style="margin-bottom: 0.5rem;">
                <button data-expand="privacy" style="color: inherit; text-decoration: none; transition: color 0.2s; background: none; border: none; padding: 0; display: flex; align-items: center; gap: 0.5rem; text-align: left; cursor: pointer; font-size: 1rem;" onmouseover="this.style.color='white'" onmouseout="this.style.color='#e5e7eb'">
                  Privacy Policy
                  <svg style="width: 1rem; height: 1rem; transition: transform 0.2s;" id="chevron-privacy" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="6,9 12,15 18,9"></polyline>
                  </svg>
                </button>
              </li>
            </ul>
          </div>
      </div>

      <!-- Expanded Content Sections -->
      <div style="margin-top: 0.25rem; padding: 0 1.5rem;">
          <!-- Storage Guide Content -->
          <div id="expanded-storage" style="display: none; transition: all 0.3s; margin: 0 auto 1rem; max-width: 1200px;">
            <div style="padding: 1.5rem; background: #111827; border-radius: 0.5rem; color: #d1d5db; line-height: 1.6; border: 1px solid #374151;">
              {storageQA && (
                <>
                  <p style="font-weight: 500; color: white; font-size: 1.125rem; margin-bottom: 0.75rem;">{storageQA.question}</p>
                  <p>{storageQA.answer}</p>
                </>
              )}
            </div>
          </div>

          <!-- Quality & Testing Content -->
          <div id="expanded-quality" style="display: none; transition: all 0.3s; margin: 0 auto 1rem; max-width: 1200px;">
            <div style="padding: 1.5rem; background: #111827; border-radius: 0.5rem; color: #d1d5db; line-height: 1.6; border: 1px solid #374151;">
              {qualityQA && (
                <>
                  <p style="font-weight: 500; color: white; font-size: 1.125rem; margin-bottom: 0.75rem;">{qualityQA.question}</p>
                  <p>{qualityQA.answer}</p>
                </>
              )}
            </div>
          </div>

          <!-- Shipping Content -->
          <div id="expanded-shipping" style="display: none; transition: all 0.3s; margin: 0 auto 1rem; max-width: 1200px;">
            <div style="padding: 1.5rem; background: #111827; border-radius: 0.5rem; color: #d1d5db; line-height: 1.6; border: 1px solid #374151;">
              {shippingQAs.length > 0 && shippingQAs.map(q => (
                <div style="margin-bottom: 1rem;">
                  <p style="font-weight: 500; color: white; font-size: 1.125rem; margin-bottom: 0.5rem;">{q.question}</p>
                  <p>{q.answer}</p>
                </div>
              ))}
            </div>
          </div>

          <!-- Contact Content -->
          <div id="expanded-contact" style="display: none; transition: all 0.3s; margin: 0 auto 1rem; max-width: 1200px;">
            <div style="padding: 1.5rem; background: #111827; border-radius: 0.5rem; border: 1px solid #374151;">
              <a href="mailto:support@novaamino.com" style="color: #60a5fa; text-decoration: none; font-size: 1.125rem;" onmouseover="this.style.color='#93c5fd'" onmouseout="this.style.color='#60a5fa'">
                support@novaamino.com
              </a>
            </div>
          </div>

          <!-- Terms of Service Content -->
          <div id="expanded-terms" style="display: none; transition: all 0.3s; margin: 0 auto 1rem; max-width: 1200px;">
            <div style="padding: 1.5rem; background: #111827; border-radius: 0.5rem; color: #d1d5db; line-height: 1.6; border: 1px solid #374151; max-height: 24rem; overflow-y: auto;">
              <h4 style="font-weight: bold; color: white; font-size: 1.25rem; margin-bottom: 0.75rem;">TERMS OF SERVICE</h4>
              {termsQA?.answer && (
                <p style="white-space: pre-line; font-size: 0.875rem;">{termsQA.answer}</p>
              )}
            </div>
          </div>

          <!-- Privacy Policy Content -->
          <div id="expanded-privacy" style="display: none; transition: all 0.3s; margin: 0 auto 1rem; max-width: 1200px;">
            <div style="padding: 1.5rem; background: #111827; border-radius: 0.5rem; color: #d1d5db; line-height: 1.6; border: 1px solid #374151; max-height: 24rem; overflow-y: auto;">
              <h4 style="font-weight: bold; color: white; font-size: 1.25rem; margin-bottom: 0.75rem;">PRIVACY POLICY</h4>
              {privacyQA?.answer && (
                <p style="white-space: pre-line; font-size: 0.875rem;">{privacyQA.answer}</p>
              )}
            </div>
          </div>
      </div>

      <!-- Nova Amino Animated Logo -->
      <div style="margin-top: 0.25rem; display: flex; justify-content: center; align-items: center; width: 100%; padding: 0.25rem 0;">
        <div class="logo-mask-wrapper" style="width: 100%; height: 320px;">
            <div class="logo-texture">
              <div class="logo-orbits">
                <div class="orb o1"></div>
                <div class="orb o2"></div>
                <div class="orb o3"></div>
                <div class="orb o4"></div>
                <div class="orb o5" id="cursor-orb-purple"></div>
              </div>
            </div>
        </div>
      </div>
    </div>
  </div>
</footer>

<style>
  /* Aurora gradient masked by logo (CSS mask on the animated layer) */
  .logo-mask-wrapper { position: relative; display: inline-block; }
  .logo-texture { position: relative; width: 100%; height: 100%;
    background:
      radial-gradient(ellipse at 20% 30%, rgba(224,223,246,0.3) 0%, transparent 50%),
      radial-gradient(ellipse at 80% 70%, rgba(213,230,244,0.3) 0%, transparent 50%),
      linear-gradient(120deg, rgba(224,223,246,0.2) 0%, rgba(225,225,245,0.2) 25%, rgba(221,231,244,0.2) 50%, rgba(216,232,242,0.2) 75%, rgba(213,230,242,0.2) 100%),
      #4682b4;
    background-size: 200% 200%, 200% 200%, 200% 200%, 100% 100%;
    animation: aurora-shift 6s ease-in-out infinite;
    -webkit-mask-image: url('/nova-amino-footer/Assets/NovaAminoLogo.svg?v=mask2');
    mask-image: url('/nova-amino-footer/Assets/NovaAminoLogo.svg?v=mask2');
    -webkit-mask-repeat: no-repeat; mask-repeat: no-repeat;
    -webkit-mask-size: 108% auto; mask-size: 108% auto;
    -webkit-mask-position: 60% center; mask-position: 60% center; 
    transform: translateX(12px); }
  /* Orbital orbs inside the masked layer */
  .logo-orbits { position: absolute; inset: 0; overflow: hidden; filter: blur(14px); z-index: 1; }
  .orb { position: absolute; left: 0; top: 0; width: 70%; aspect-ratio: 1/1; border-radius: 50%;
    background: radial-gradient(circle at 35% 35%, rgba(124,58,237,0.95) 0%, rgba(139,92,246,0.6) 40%, rgba(147,197,253,0.25) 70%, transparent 80%);
    mix-blend-mode: screen; opacity: .9; offset-rotate: 0deg; }
  .orb.o2 { width: 58%; background: radial-gradient(circle at 35% 35%, rgba(30,144,255,0.95) 0%, rgba(56,189,248,0.8) 40%, rgba(59,130,246,0.5) 70%, transparent 80%); opacity: .95; }
  .orb.o3 { width: 66%; background: radial-gradient(circle at 35% 35%, rgba(147,51,234,0.95) 0%, rgba(167,139,250,0.8) 40%, rgba(196,181,253,0.5) 70%, transparent 80%); opacity: .95; }
  .orb.o4 { width: 70%; background: radial-gradient(circle at 35% 35%, rgba(124,58,237,0.98) 0%, rgba(139,92,246,0.8) 40%, rgba(168,85,247,0.5) 70%, transparent 80%); opacity: .95; }
  .orb.o5 { width: 74%; background: radial-gradient(circle at 35% 35%, rgba(124,58,237,0.98) 0%, rgba(139,92,246,0.8) 40%, rgba(168,85,247,0.5) 70%, transparent 80%); opacity: .95; left: 15%; top: 10%; }
  /* Fallback animation using top/left to ensure motion everywhere */
  .o1 { animation: driftA 4s ease-in-out infinite alternate; animation-delay: 0s; }
  .o2 { animation: driftB 5s ease-in-out infinite alternate; animation-delay: 1s; }
  .o3 { animation: oscillateLeft 3s ease-in-out infinite alternate; animation-delay: 0s; }
  .o4 { animation: oscillateRight 4s ease-in-out infinite alternate; animation-delay: 0s; }
  .o5 { transition: all 0.3s ease-out; }
  @keyframes driftA { 0% { left: -30%; top: 10%; } 50% { left: 50%; top: 10%; } 100% { left: 130%; top: 10%; } }
  @keyframes driftB { 0% { left: -20%; top: 10%; } 50% { left: 50%; top: 10%; } 100% { left: 120%; top: 10%; } }
  @keyframes oscillateLeft { 0% { left: -30%; top: 10%; } 100% { left: 130%; top: 10%; } }
  @keyframes oscillateRight { 0% { left: 130%; top: 10%; } 100% { left: -30%; top: 10%; } }
  .logo-texture::after { content: ""; position: absolute; inset: 0; pointer-events: none; z-index: 2;
    background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 200 200' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='n'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='2.5' numOctaves='5' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23n)' opacity='0.8'/%3E%3C/svg%3E");
    background-repeat: repeat; background-size: 150px 150px; mix-blend-mode: overlay; opacity: .35; filter: contrast(160%) brightness(110%);
    -webkit-mask-image: inherit; mask-image: inherit; -webkit-mask-repeat: inherit; mask-repeat: inherit; -webkit-mask-size: inherit; mask-size: inherit; -webkit-mask-position: inherit; mask-position: inherit; }
  @keyframes aurora-shift { 0%,100% { background-position: 0% 50%; } 50% { background-position: 100% 50%; } }

  /* Logo responsive adjustments */
  @media (min-width: 768px) {
    .logo-mask-wrapper {
      width: 100% !important;
    }
  }
</style>

<script>
  // Cursor following orb (purple only)
  const logoOrbits = document.querySelector('.logo-orbits');
  const purpleOrb = document.getElementById('cursor-orb-purple');

  let mouseX = 0;
  let mouseY = 0;

  document.addEventListener('mousemove', (e) => {
    if (!logoOrbits) return;

    const rect = logoOrbits.getBoundingClientRect();
    const relativeX = e.clientX - rect.left;
    const relativeY = e.clientY - rect.top;

    // Convert to percentage within the logo bounds, covering full width
    const percentX = Math.max(-40, Math.min(140, (relativeX / rect.width) * 100 - 20));
    const percentY = Math.max(0, Math.min(100, (relativeY / rect.height) * 100));

    // Override to force 10% height
    mouseY = 10;
    mouseX = percentX;
  });

  function updateCursorOrb() {
    if (purpleOrb) {
      // Purple orb follows cursor with slight offset and delay
      const offsetX = mouseX + Math.sin(Date.now() * 0.002) * 10;
      const offsetY = mouseY + Math.cos(Date.now() * 0.002) * 10;

      purpleOrb.style.left = Math.max(-40, Math.min(140, offsetX)) + '%';
      purpleOrb.style.top = '10%';
    }

    requestAnimationFrame(updateCursorOrb);
  }

  // Start the animation loop
  updateCursorOrb();

  // Footer expandable sections functionality
  let expandedSections = {};

  function toggleExpand(key) {
    const panel = document.getElementById(`expanded-${key}`)
    const chev = document.getElementById(`chevron-${key}`)
    if (!panel) return
    const isOpen = panel.style.display === 'block'
    // close all
    ;['storage','quality','shipping','contact','terms','privacy'].forEach(k=>{
      const p = document.getElementById(`expanded-${k}`)
      const c = document.getElementById(`chevron-${k}`)
      if (p) p.style.display = 'none'
      if (c) c.style.transform = 'rotate(0deg)'
    })
    // open if it was closed
    if (!isOpen) {
      panel.style.display = 'block'
      if (chev) chev.style.transform = 'rotate(180deg)'
    }
  }

  // Delegate clicks to support dynamic content and ensure handler is bound once
  document.addEventListener('click', (e) => {
    const btn = e.target.closest('[data-expand]')
    if (btn) {
      const key = btn.getAttribute('data-expand')
      toggleExpand(key)
    }
  })
</script>