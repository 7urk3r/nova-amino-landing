---
import { optimizeImage } from '../../lib/imageUtils'

export interface Props {
  product: {
    title: string;
    description?: string;
    slug?: string;
    imageUrl?: string;
    back?: string;
    basePrice?: number;
    dosages?: Array<{
      label?: string;
      amount?: number;
      unit?: string;
      price?: number;
      sku?: string;
      dosage?: string;
    }>;
    areaOfStudy?: string[];
    available?: boolean;
  };
  class?: string;
}

const { product, class: className = "" } = Astro.props;

// Calculate price display
const prices = Array.isArray(product.dosages)
  ? product.dosages.map((d: any) => d?.price).filter((n: any) => typeof n === 'number')
  : [];
const displayPrice = typeof product.basePrice === 'number'
  ? product.basePrice
  : (prices.length ? Math.min(...prices) : undefined);

// Stock status (you can customize this logic based on your needs)
const stockStatus = product.available !== false ? 'in-stock' : 'out-of-stock';

// Generate unique ID for this product card
const cardId = `product-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

// Optimize product images
const optimizedFrontImage = optimizeImage(product.imageUrl, { width: 400, height: 400, quality: 80 });
const optimizedBackImage = optimizeImage(product.back, { width: 400, height: 400, quality: 80 });
---

<article class={`na-product-card ${className}`} aria-label={`${product.title} product card`}>
  <div class="na-media">
    <div class="na-aurora" aria-hidden="true">
      <div class="na-aurora-gradient"></div>
      <div class="na-grain"></div>
    </div>
    {optimizedFrontImage && (
      <>
        <img src={optimizedFrontImage} alt={product.title} class="na-vial na-vial-front" loading="lazy" />
        {optimizedBackImage && (
          <img src={optimizedBackImage} alt={`${product.title} back`} class="na-vial na-vial-back" loading="lazy" />
        )}
      </>
    )}
    <div class={`na-stock-pill ${stockStatus === 'out-of-stock' ? 'oos' : ''}`}>
      <span class="dot" aria-hidden="true"></span>
      <span class="txt">{stockStatus === 'out-of-stock' ? 'Out of stock' : 'In stock'}</span>
    </div>
  </div>

  <div class="na-body">
    <div class="na-header">
      <h3 class="na-name">{product.title}</h3>
      {displayPrice !== undefined && (
        <div class="na-price" data-price-display>${Math.round(displayPrice)}</div>
      )}
    </div>

    {Array.isArray(product.areaOfStudy) && product.areaOfStudy.length > 0 && (
      <div>
        <span class="na-label">Areas of study</span>
        <div class="na-benefits">
          {product.areaOfStudy.map((area: string) => (
            <span class="na-pill">{area.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase())}</span>
          ))}
        </div>
      </div>
    )}

    {Array.isArray(product.dosages) && product.dosages.length > 0 && (
      <div class="na-field">
        <span class="na-label">Dosage</span>
        <div class="na-dosage-section">
          <div class="na-dosage-pills">
            {product.dosages.map((d: any, index: number) => (
              <label class="na-dosage-pill">
                <input
                  type="radio"
                  name={`dosage-${cardId}`}
                  value={d.dosage || d.label || `${d.amount || ''}${d.unit || ''}`}
                  data-price={d.price || displayPrice}
                  checked={index === 0}
                  class="dosage-radio"
                />
                <span class="na-dosage-label na-micro-spaced">{(d.dosage || d.label || `${d.amount || ''}${d.unit || ''}`)?.replace(/(\d+)(mg|ml|mcg|g)/i, '$1 $2')}</span>
              </label>
            ))}
          </div>
          <button class="na-btn" disabled={stockStatus === 'out-of-stock'} aria-label={stockStatus === 'out-of-stock' ? 'Out of stock' : 'Add to cart'}>
            <svg class="cart" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="9" cy="21" r="1"></circle>
              <circle cx="20" cy="21" r="1"></circle>
              <path d="M1 1h4l2.68 12.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
            </svg>
          </button>
        </div>
      </div>
    )}
  </div>
</article>

<style>
  :root {
    --card-radius: 20px;
    --card-bg: #ffffff;
    --text: #111827;          /* neutral-900 */
    --muted-600: #4b5563;     /* neutral-600 */
    --border: #e5e7eb;        /* neutral-200 */
    --shadow: 0 2px 6px rgba(0,0,0,0.06), 0 10px 30px rgba(0,0,0,0.10);
    --cta: #0f172a;           /* slate-900 */
    --cta-text: #ffffff;
    --focus: 0 0 0 3px rgba(15, 23, 42, 0.2);
    --font-heading: "TT Commons Pro", ui-sans-serif, system-ui, -apple-system, "Segoe UI", Inter, Roboto, "Helvetica Neue", Arial, sans-serif;
    --font-mono: "IBM Plex Mono", "Courier New", monospace;
  }

  /* --- Card --- */
  .na-product-card {
    width: 100%;
    max-width: 420px;
    display: grid;
    grid-template-rows: auto 1fr auto;
    background: var(--card-bg);
    border-radius: var(--card-radius);
    box-shadow: var(--shadow);
    overflow: hidden; /* ensures no stray lines on media corners */
    margin: 0 auto; /* center the cards */
    transition: all 0.3s ease;
    cursor: pointer;
  }

  /* Card hover effect - raised appearance */
  .na-product-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.15), 0 20px 40px rgba(0,0,0,0.12);
  }

  /* --- Media: Aurora background with optional PNG overlay --- */
  .na-media { position: relative; aspect-ratio: 4 / 3; background: transparent; overflow: hidden; }
  .na-aurora { position: absolute; inset: 0; }
  .na-aurora-gradient { position: absolute; inset: 0; background:
      radial-gradient(120% 80% at 0% 100%, #f0f8fb 0%, transparent 55%),
      radial-gradient(120% 80% at 100% 100%, #f2f6fc 0%, transparent 55%),
      linear-gradient(90deg,#ffffff 0%,#fafcfd 25%,#f8fbfc 50%,#f4f9fb 75%,#f1f7fa 100%);
  }
  .na-grain { position: absolute; inset: 0; opacity: 0.6; mix-blend-mode: overlay; filter: contrast(180%) brightness(105%);
    background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 200 200' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='2.5' numOctaves='5' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)' opacity='0.8'/%3E%3C/svg%3E");
  }
  /* PNG overlay for the vial */
  .na-vial { position: absolute; inset: 0; margin: auto; width: 90%; height: 98%; object-fit: contain; display: block; pointer-events: none; transition: opacity 0.3s ease; }
  .na-vial-front { opacity: 1; z-index: 2; }
  .na-vial-back { opacity: 0; z-index: 1; }

  /* Hover effect to show back image - only on image area */
  .na-media:hover .na-vial-front { opacity: 0; }
  .na-media:hover .na-vial-back { opacity: 1; }

  /* Stock pill overlay */
  .na-stock-pill { position: absolute; top: 12px; right: 12px; display: inline-flex; align-items: center; gap: 7px; background: rgba(255,255,255,0.92); border: 1px solid rgba(255,255,255,0.9); color: #111827; padding: 5px 9px; border-radius: 999px; font-size: 11px; font-weight: 600; box-shadow: 0 1px 2px rgba(0,0,0,0.05); }
  .na-stock-pill .dot { width: 9px; height: 9px; border-radius: 50%; background: #10b981; }
  .na-stock-pill.low .dot { background: #f59e0b; }
  .na-stock-pill.oos .dot { background: #9ca3af; }

  /* --- Body --- */
  .na-body { padding: 16px; display: grid; gap: 12px; }
  .na-header { display: flex; align-items: flex-start; justify-content: space-between; gap: 12px; min-height: 44px; }
  .na-name  { margin: 0; font-size: 18px; line-height: 1.2; font-weight: 700; color: var(--text); flex: 1; font-family: var(--font-heading); }
  .na-price { text-align: right; font-weight: 700; font-size: 20px; flex-shrink: 0; font-family: var(--font-mono); }

  .na-label { font-size: 12px; color: var(--muted-600); font-weight: 600; margin-bottom: 6px; display: inline-block; }
  .na-benefits { display: flex; flex-wrap: wrap; gap: 6px; }
  .na-pill { border: 1px solid var(--border); border-radius: 999px; padding: 6px 10px; font-size: 11px; color: #374151; background: #ffffff; }

  /* Dosage Pills */
  .na-field { display: grid; gap: 6px; }
  .na-dosage-section { display: flex; align-items: center; gap: 8px; }
  .na-dosage-pills { display: flex; gap: 6px; flex: 1; min-width: 0; }
  .na-dosage-pill { position: relative; cursor: pointer; }
  .na-dosage-pill input[type="radio"] { position: absolute; opacity: 0; }
  .na-dosage-label {
    display: inline-block;
    border: 1px solid var(--border);
    border-radius: 999px;
    padding: 6px 10px;
    font-size: 14px;
    color: #374151;
    background: #ffffff;
    transition: all 0.2s ease;
    white-space: nowrap;
    flex-shrink: 0;
    font-family: var(--font-mono);
    font-weight: 600;
    letter-spacing: 0.02em;
  }
  .na-dosage-pill input[type="radio"]:checked + .na-dosage-label {
    background: var(--text);
    color: #ffffff;
    border-color: var(--text);
  }
  .na-dosage-pill input[type="radio"]:focus + .na-dosage-label {
    box-shadow: var(--focus);
  }

  /* Micro-spaced dosage labels - compress space between number and unit by 30% */
  .na-micro-spaced {
    word-spacing: -0.576em;
  }

  /* --- Add to Cart Button --- */
  .na-btn {
    width: auto;
    min-width: 64px;
    height: 36px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border: 0;
    border-radius: 12px;
    padding: 8px 16px;
    background: var(--text);
    color: #ffffff;
    font-weight: 700;
    cursor: pointer;
    box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
    text-decoration: none;
    transition: all 0.2s ease;
    flex-shrink: 0;
  }
  .na-btn:focus { outline: none; box-shadow: 0 0 0 3px rgba(15, 23, 42, 0.2); }
  .na-btn[disabled] { opacity: 0.5; cursor: not-allowed; }
  .na-btn:hover:not([disabled]) {
    background: #2563eb;
    transform: translateY(-1px);
    box-shadow: 0 2px 6px rgba(37, 99, 235, 0.3), 0 2px 4px rgba(37, 99, 235, 0.4);
  }
  .cart { width: 18px; height: 18px; display: inline-block; }
</style>

<script>
  // Price update functionality
  document.addEventListener('DOMContentLoaded', function() {
    // Handle price updates for all product cards
    const dosageRadios = document.querySelectorAll('.dosage-radio');

    dosageRadios.forEach(radio => {
      radio.addEventListener('change', function() {
        if (this.checked) {
          const price = parseFloat(this.getAttribute('data-price'));
          const card = this.closest('.na-product-card');
          const priceDisplay = card.querySelector('[data-price-display]');

          if (priceDisplay && !isNaN(price)) {
            priceDisplay.textContent = `$${Math.round(price)}`;
          }
        }
      });
    });
  });
</script>