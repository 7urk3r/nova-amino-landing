---
const overlayId = 'access-confirmation-overlay'
const configScriptId = 'access-confirmation-config'
const confirmationKey = 'novaAminoAccessConfirmed'
const confirmationTimestampKey = 'novaAminoAccessConfirmedAt'
const defaultDeclineUrl = 'https://www.google.com'
const defaultRememberDays = 30

interface AccessLanguage {
  label?: string
  langCode?: string
  title?: string
  question?: string
  paragraphs?: string[]
  acceptButtonLabel?: string
  declineButtonLabel?: string
}

interface AccessConfirmationDocument {
  enabled?: boolean
  minimumAge?: number
  rememberForDays?: number
  termsUrl?: string
  termsLabel?: string
  privacyUrl?: string
  privacyLabel?: string
  declineRedirectUrl?: string
  successRedirectUrl?: string
  defaultLanguage?: string
  languages?: AccessLanguage[]
}

const defaultLanguage: Required<AccessLanguage> = {
  label: 'English',
  langCode: 'en',
  title: 'Access Confirmation',
  question: 'Do you accept these terms?',
  paragraphs: [
    'By entering this site, I confirm that I am at least 21 years of age and a qualified researcher. I understand that all Nova Amino products are sold strictly for laboratory research use only (RUO) and are not intended for human or veterinary consumption, medical treatment, or diagnostic purposes.',
    'I acknowledge that all information provided is for educational and informational purposes only and should not be interpreted as medical advice. I accept full responsibility for complying with all applicable laws in my jurisdiction and agree to hold Nova Amino harmless from any misuse of products.',
    'I also consent to the use of cookies required for essential site functions (such as remembering language preferences) and analytics. By clicking "Yes," I agree to these terms as well as Nova Amino\'s Terms of Service and Privacy Policy.'
  ],
  acceptButtonLabel: 'Yes, Enter Site',
  declineButtonLabel: 'No, Exit'
}

const defaultSpanish: Required<AccessLanguage> = {
  label: 'Español',
  langCode: 'es',
  title: 'Confirmación de Acceso',
  question: '¿Acepta estos términos?',
  paragraphs: [
    'Al ingresar a este sitio, confirmo que tengo al menos 21 años de edad y que soy un investigador calificado. Entiendo que todos los productos de Nova Amino se venden estrictamente para uso de investigación de laboratorio (RUO) y no están destinados al consumo humano o veterinario, ni para tratamiento médico o fines de diagnóstico.',
    'Reconozco que toda la información proporcionada es únicamente con fines educativos e informativos y no debe interpretarse como consejo médico. Acepto la responsabilidad total de cumplir con todas las leyes aplicables en mi jurisdicción y acepto liberar a Nova Amino de cualquier responsabilidad derivada del uso indebido de los productos.',
    'También autorizo el uso de cookies necesarias para las funciones esenciales del sitio (como recordar las preferencias de idioma) y con fines analíticos. Al hacer clic en "Sí", acepto estos términos, así como los Términos de Servicio y la Política de Privacidad de Nova Amino.'
  ],
  acceptButtonLabel: 'Sí, entrar al sitio',
  declineButtonLabel: 'No, salir'
}

const propsData = (Astro.props?.data ?? {}) as AccessConfirmationDocument
const isEnabled = propsData.enabled ?? true

const escapeHtml = (value: string) =>
  value
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;')

const escapeRegExp = (value: string) => value.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')

const termsLabel = propsData.termsLabel?.trim() || 'Terms of Service'
const privacyLabel = propsData.privacyLabel?.trim() || 'Privacy Policy'
const termsUrl = propsData.termsUrl?.trim() || '#'
const privacyUrl = propsData.privacyUrl?.trim() || '#'

const highlightLinks = (text: string) => {
  let html = escapeHtml(text)

  if (termsUrl && termsLabel) {
    const sanitizedTerms = escapeHtml(termsLabel)
    const pattern = new RegExp(escapeRegExp(sanitizedTerms), 'g')
    html = html.replace(
      pattern,
      `<a href="${termsUrl}" class="access-link" target="_blank" rel="noopener">${sanitizedTerms}</a>`
    )
  }

  if (privacyUrl && privacyLabel) {
    const sanitizedPrivacy = escapeHtml(privacyLabel)
    const pattern = new RegExp(escapeRegExp(sanitizedPrivacy), 'g')
    html = html.replace(
      pattern,
      `<a href="${privacyUrl}" class="access-link" target="_blank" rel="noopener">${sanitizedPrivacy}</a>`
    )
  }

  return `<p>${html}</p>`
}

const rawLanguages = Array.isArray(propsData.languages) && propsData.languages.length
  ? propsData.languages
  : [defaultLanguage, defaultSpanish]

const normalizedLanguages = rawLanguages
  .map((lang) => ({
    label: lang.label?.trim() || defaultLanguage.label,
    langCode: lang.langCode?.trim() || defaultLanguage.langCode,
    title: lang.title?.trim() || defaultLanguage.title,
    question: lang.question?.trim() || defaultLanguage.question,
    acceptButtonLabel: lang.acceptButtonLabel?.trim() || defaultLanguage.acceptButtonLabel,
    declineButtonLabel: lang.declineButtonLabel?.trim() || defaultLanguage.declineButtonLabel,
    paragraphs: (lang.paragraphs && lang.paragraphs.length ? lang.paragraphs : defaultLanguage.paragraphs).map(highlightLinks)
  }))
  .filter((lang, index, self) => lang && lang.langCode && self.findIndex((candidate) => candidate.langCode === lang.langCode) === index)

const safeRememberDays = Number.isFinite(propsData.rememberForDays)
  ? Math.max(1, Math.min(Number(propsData.rememberForDays), 365))
  : defaultRememberDays

const defaultLanguageCode = propsData.defaultLanguage && normalizedLanguages.some((lang) => lang.langCode === propsData.defaultLanguage)
  ? propsData.defaultLanguage
  : normalizedLanguages[0]?.langCode ?? defaultLanguage.langCode

const initialLanguage = normalizedLanguages.find((lang) => lang.langCode === defaultLanguageCode) || normalizedLanguages[0]

const config = {
  acceptKey: confirmationKey,
  acceptAtKey: confirmationTimestampKey,
  rememberForMs: safeRememberDays * 24 * 60 * 60 * 1000,
  declineRedirectUrl: propsData.declineRedirectUrl?.trim() || defaultDeclineUrl,
  successRedirectUrl: propsData.successRedirectUrl?.trim() || '',
  languages: normalizedLanguages,
  defaultLanguage: initialLanguage?.langCode ?? defaultLanguage.langCode,
  minimumAge: propsData.minimumAge ?? 21,
}

const configJson = JSON.stringify(config).replace(/</g, '\\u003c')
const shouldRender = isEnabled && normalizedLanguages.length > 0
---
{shouldRender && (
  <>
    <div
      id={overlayId}
      class="access-overlay"
      data-active="true"
      aria-hidden="true"
    >
      <div class="access-container">
        <div class="access-gradients" aria-hidden="true">
          <div class="access-orb access-orb-top-left"></div>
          <div class="access-orb access-orb-bottom-left"></div>
          <div class="access-orb access-orb-top-right"></div>
          <div class="access-orb access-orb-bottom-right"></div>
          <div class="access-orb access-orb-top-center"></div>
          <div class="access-orb access-orb-bottom-center"></div>
          <div class="access-orb access-orb-left-vertical"></div>
        </div>

        <div class="access-card" role="dialog" aria-modal="true" aria-labelledby="access-confirmation-title">
          <div class="access-card-surface">
            <div class="access-content">
            <div class="access-header">
              <div class="access-lang-switch" role="tablist" aria-label="Language selector">
                {normalizedLanguages.map((lang) => {
                  const isActive = lang.langCode === (initialLanguage?.langCode ?? normalizedLanguages[0]?.langCode ?? defaultLanguage.langCode)
                  return (
                    <button
                      class={`access-lang-option${isActive ? ' access-lang-active' : ''}`}
                      role="tab"
                      aria-selected={isActive ? 'true' : 'false'}
                      data-lang={lang.langCode}
                      tabIndex={isActive ? 0 : -1}
                    >
                      {lang.label}
                    </button>
                  )
                })}
              </div>
            </div>

            <div class="access-logo-measure" aria-hidden="true"></div>

            <div class="access-main">
              <h1 id="access-confirmation-title" class="access-title">{initialLanguage?.title ?? defaultLanguage.title}</h1>
              <div class="access-text" set:html={(initialLanguage?.paragraphs ?? defaultLanguage.paragraphs.map(highlightLinks)).join('')}></div>
              <p class="access-question">{initialLanguage?.question ?? defaultLanguage.question}</p>
              <div class="access-buttons">
                <button class="access-btn access-btn-primary" type="button" data-action="confirm">
                  {initialLanguage?.acceptButtonLabel ?? defaultLanguage.acceptButtonLabel}
                </button>
                <button class="access-btn access-btn-secondary" type="button" data-action="exit">
                  {initialLanguage?.declineButtonLabel ?? defaultLanguage.declineButtonLabel}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script type="application/json" id={configScriptId}>
      {configJson}
    </script>

    <style>
      .access-overlay {
        position: fixed;
        inset: 0;
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
        background: radial-gradient(ellipse at bottom left, rgba(186, 149, 235, 0.4) 0%, rgba(186, 149, 235, 0) 55%),
                    radial-gradient(ellipse at bottom right, rgba(135, 206, 235, 0.4) 0%, rgba(135, 206, 235, 0) 55%),
                    linear-gradient(100deg, #C8A8E9 0%, #B8A0E6 30%, #A8C8F0 55%, #88D0F8 78%, #68D8FF 100%);
        background-repeat: no-repeat;
        background-size: cover;
        background-position: center;
        transition: opacity 0.4s ease, visibility 0.4s ease;
        opacity: 1;
        visibility: visible;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      }

      .access-overlay[data-active="false"] {
        opacity: 0;
        visibility: hidden;
        pointer-events: none;
      }

      .access-container {
        position: relative;
        height: 100%;
        width: 100%;
        overflow: hidden;
        pointer-events: none;
      }

      .access-container * {
        box-sizing: border-box;
      }

      .access-container::after {
        content: "";
        position: absolute;
        inset: 0;
        z-index: 5;
        pointer-events: none;
        background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 200 200' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='n'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='2.5' numOctaves='5' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23n)' opacity='0.8'/%3E%3C/svg%3E");
        background-repeat: repeat;
        background-size: 150px 150px;
        mix-blend-mode: overlay;
        opacity: 0.3;
      }

      .access-gradients {
        position: absolute;
        inset: 0;
        overflow: hidden;
        filter: blur(25px);
        pointer-events: none;
        z-index: 0;
      }

      .access-orb {
        position: absolute;
        width: 180vmin;
        height: 180vmin;
        border-radius: 50%;
        opacity: 0.8;
        background: radial-gradient(circle at 30% 40%, rgba(75, 0, 130, 1) 0%, rgba(106, 90, 205, 0.9) 25%, rgba(138, 43, 226, 0.8) 50%, rgba(102, 51, 153, 0.6) 75%, rgba(75, 0, 130, 0.4) 90%, transparent 100%);
        will-change: transform;
      }

      .access-orb-top-left { animation: access-orbit-1 8s ease-in-out infinite; animation-delay: -1s; }
      .access-orb-bottom-left { animation: access-orbit-4-rev 9s ease-in-out infinite; animation-delay: -3.5s; }
      .access-orb-top-right { animation: access-orbit-3-rev 7s ease-in-out infinite; animation-delay: -2s; }
      .access-orb-bottom-right { animation: access-orbit-6 8.5s ease-in-out infinite; animation-delay: -2.5s; }
      .access-orb-top-center { animation: access-orbit-clockwise-rev 6s ease-in-out infinite; }
      .access-orb-bottom-center { animation: access-orbit-5 7.5s ease-in-out infinite; animation-delay: -3s; }
      .access-orb-left-vertical { animation: access-orbit-vertical 10s ease-in-out infinite; }

      .access-card {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: min(70vw, 900px);
        height: min(85vh, 700px);
        max-width: 900px;
        max-height: 700px;
        z-index: 2;
        pointer-events: auto;
        border-radius: 34px;
        background: linear-gradient(145deg, rgba(255, 255, 255, 0.85), rgba(208, 217, 255, 0.55));
        padding: 2px;
        box-shadow: 0 35px 65px rgba(15, 23, 42, 0.35);
      }

      .access-card::before {
        content: "";
        position: absolute;
        inset: 0;
        border-radius: 34px;
        border: 1px solid rgba(148, 163, 184, 0.35);
        pointer-events: none;
      }

      .access-card-surface {
        position: relative;
        width: 100%;
        height: 100%;
        border-radius: 30px;
        background: rgba(255, 255, 255, 0.98);
        box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.8);
        overflow: hidden;
        pointer-events: auto;
      }

      .access-content {
        position: relative;
        z-index: 3;
        border-radius: 28px;
        width: 100%;
        height: 100%;
        overflow: hidden;
        pointer-events: none;
        --access-pad-left: 64px;
        --access-pad-right: 64px;
      }

      .access-content > * {
        pointer-events: auto;
      }

      .access-logo-measure {
        position: absolute;
        top: 5%;
        left: 5%;
        width: 25%;
        aspect-ratio: 535 / 78;
        visibility: hidden;
        pointer-events: none;
      }

      .access-header {
        position: absolute;
        top: 24px;
        right: 5%;
        display: flex;
        align-items: center;
        gap: 16px;
      }

      .access-lang-switch {
        display: inline-flex;
        align-items: center;
        background: rgba(255, 255, 255, 0.9);
        border: 1px solid rgba(0, 0, 0, 0.08);
        border-radius: 9999px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.06);
        overflow: hidden;
        backdrop-filter: saturate(140%) blur(6px);
        height: 44px;
      }

      .access-lang-option {
        position: relative;
        display: flex;
        align-items: center;
        height: 100%;
        padding: 0 14px;
        font-size: 15px;
        font-weight: 600;
        line-height: 1;
        color: #4b5563;
        cursor: pointer;
        user-select: none;
        transition: color 160ms ease;
        white-space: nowrap;
        background: transparent;
        border: none;
      }

      .access-lang-option:focus-visible {
        outline: 2px solid #2D5BFF;
        outline-offset: 2px;
      }

      .access-lang-option.access-lang-active {
        color: #ffffff;
      }

      .access-lang-option.access-lang-active::before {
        content: "";
        position: absolute;
        inset: 2px;
        border-radius: 9999px;
        background: #2D5BFF;
        z-index: -1;
      }

      @media (max-width: 640px) {
        .access-lang-switch {
          height: 40px;
        }

        .access-lang-option {
          padding: 0 12px;
          font-size: 13px;
        }
      }

      .access-main {
        position: relative;
        display: grid;
        grid-template-rows: auto 1fr auto;
        height: 100%;
        padding: 80px var(--access-pad-right) 40px var(--access-pad-left);
        gap: 32px;
        box-sizing: border-box;
      }

      .access-title {
        font-size: 32px;
        font-weight: 700;
        line-height: 40px;
        color: #111827;
        margin: 40px var(--access-pad-right) 0 var(--access-pad-left);
        text-align: center;
        letter-spacing: -0.025em;
      }

      .access-text {
        overflow-y: auto;
        width: 100%;
        box-sizing: border-box;
        padding: 24px var(--access-pad-right) 24px var(--access-pad-left);
        background: rgba(0, 0, 0, 0.02);
        border: 1px solid rgba(0, 0, 0, 0.06);
        box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.06), inset 0 1px 2px rgba(0, 0, 0, 0.04);
        margin: 0;
        border-radius: 0;
      }

      .access-text p {
        font-size: 15px;
        line-height: 24px;
        color: #374151;
        margin: 0 0 16px;
        font-weight: 400;
      }

      .access-text p:last-child {
        margin-bottom: 0;
      }

      .access-link {
        color: #2D5BFF;
        text-decoration: none;
        font-weight: 500;
        border-bottom: 1px solid #2D5BFF;
        transition: color 0.15s ease, border-color 0.15s ease;
      }

      .access-link:hover {
        color: #1e40af;
        border-bottom-color: #1e40af;
      }

      .access-question {
        font-weight: 600;
        font-size: 16px;
        line-height: 24px;
        text-align: center;
        color: #111827;
        margin: 0 var(--access-pad-right) 0 var(--access-pad-left);
      }

      .access-buttons {
        display: flex;
        gap: 16px;
        justify-content: center;
        margin: 0 var(--access-pad-right) 0 var(--access-pad-left);
      }

      .access-btn {
        padding: 16px 32px;
        border-radius: 12px;
        font-size: 16px;
        font-weight: 600;
        line-height: 20px;
        border: none;
        cursor: pointer;
        transition: all 0.2s ease;
        min-width: 144px;
        text-align: center;
      }

      .access-btn-primary {
        background: #2D5BFF;
        color: #ffffff;
        box-shadow: 0 1px 3px rgba(45, 91, 255, 0.3);
      }

      .access-btn-primary:hover {
        background: #1e40af;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(45, 91, 255, 0.4);
      }

      .access-btn-primary:active {
        transform: translateY(0);
        box-shadow: 0 1px 3px rgba(45, 91, 255, 0.3);
      }

      .access-btn-secondary {
        background: #ffffff;
        color: #374151;
        border: 1px solid #d1d5db;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      }

      .access-btn-secondary:hover {
        background: #f9fafb;
        border-color: #9ca3af;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      }

      .access-btn-secondary:active {
        transform: translateY(0);
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      }

      @media (max-width: 640px) {
        .access-content {
          --access-pad-left: 32px;
          --access-pad-right: 32px;
        }

        .access-card {
          width: min(92vw, 520px);
          height: min(92vh, 640px);
        }

        .access-main {
          padding: 64px var(--access-pad-right) 32px var(--access-pad-left);
          gap: 24px;
        }

        .access-title {
          font-size: 28px;
          line-height: 32px;
          margin: 32px var(--access-pad-right) 0 var(--access-pad-left);
        }

        .access-text {
          padding: 20px var(--access-pad-right) 20px var(--access-pad-left);
        }

        .access-buttons {
          flex-direction: column;
          gap: 12px;
        }

        .access-btn {
          width: 100%;
          padding: 14px 24px;
          font-size: 15px;
          min-width: unset;
        }
      }

      @keyframes access-orbit-5 {
        0% { transform: translate(calc(43vw - 90vmin), calc(50vh - 90vmin)) rotate(0deg) translateX(150px) rotate(0deg); }
        100% { transform: translate(calc(43vw - 90vmin), calc(50vh - 90vmin)) rotate(360deg) translateX(150px) rotate(-360deg); }
      }

      @keyframes access-orbit-3 {
        0% { top: calc(30% + 16.67% - 90vmin); left: calc(53% + 12.5% - 90vmin); }
        25% { top: calc(45% + 16.67% - 90vmin); left: calc(43% + 12.5% - 90vmin); }
        50% { top: calc(55% + 16.67% - 90vmin); left: calc(48% + 12.5% - 90vmin); }
        75% { top: calc(45% + 16.67% - 90vmin); left: calc(53% + 12.5% - 90vmin); }
        100% { top: calc(30% + 16.67% - 90vmin); left: calc(53% + 12.5% - 90vmin); }
      }

      @keyframes access-orbit-3-rev {
        0% { top: calc(30% + 16.67% - 90vmin); left: calc(53% + 12.5% - 90vmin); }
        25% { top: calc(55% + 16.67% - 90vmin); left: calc(53% + 12.5% - 90vmin); }
        50% { top: calc(35% + 16.67% - 90vmin); left: calc(53% + 12.5% - 90vmin); }
        75% { top: calc(45% + 16.67% - 90vmin); left: calc(43% + 12.5% - 90vmin); }
        100% { top: calc(30% + 16.67% - 90vmin); left: calc(53% + 12.5% - 90vmin); }
      }

      @keyframes access-orbit-1 {
        0% { top: calc(35% + 16.67% - 90vmin); left: calc(33% + 12.5% - 90vmin); }
        16.67% { top: calc(38% + 16.67% - 90vmin); left: calc(35% + 12.5% - 90vmin); }
        33.33% { top: calc(50% + 16.67% - 90vmin); left: calc(35% + 12.5% - 90vmin); }
        50% { top: calc(58% + 16.67% - 90vmin); left: calc(35% + 12.5% - 90vmin); }
        66.67% { top: calc(52% + 16.67% - 90vmin); left: calc(33% + 12.5% - 90vmin); }
        83.33% { top: calc(40% + 16.67% - 90vmin); left: calc(33% + 12.5% - 90vmin); }
        100% { top: calc(35% + 16.67% - 90vmin); left: calc(33% + 12.5% - 90vmin); }
      }

      @keyframes access-orbit-4 {
        0% { top: calc(55% + 16.67% - 90vmin); left: calc(33% + 12.5% - 90vmin); }
        25% { top: calc(35% + 16.67% - 90vmin); left: calc(33% + 12.5% - 90vmin); }
        50% { top: calc(35% + 16.67% - 90vmin); left: calc(53% + 12.5% - 90vmin); }
        75% { top: calc(55% + 16.67% - 90vmin); left: calc(53% + 12.5% - 90vmin); }
        100% { top: calc(55% + 16.67% - 90vmin); left: calc(33% + 12.5% - 90vmin); }
      }

      @keyframes access-orbit-4-rev {
        0% { top: calc(55% + 16.67% - 90vmin); left: calc(33% + 12.5% - 90vmin); }
        25% { top: calc(55% + 16.67% - 90vmin); left: calc(53% + 12.5% - 90vmin); }
        50% { top: calc(35% + 16.67% - 90vmin); left: calc(53% + 12.5% - 90vmin); }
        75% { top: calc(35% + 16.67% - 90vmin); left: calc(33% + 12.5% - 90vmin); }
        100% { top: calc(55% + 16.67% - 90vmin); left: calc(33% + 12.5% - 90vmin); }
      }

      @keyframes access-orbit-6 {
        0% { top: calc(50% + 16.67% - 90vmin); left: calc(48% + 12.5% - 90vmin); }
        12.5% { top: calc(55% + 16.67% - 90vmin); left: calc(43% + 12.5% - 90vmin); }
        25% { top: calc(50% + 16.67% - 90vmin); left: calc(35% + 12.5% - 90vmin); }
        37.5% { top: calc(38% + 16.67% - 90vmin); left: calc(35% + 12.5% - 90vmin); }
        50% { top: calc(35% + 16.67% - 90vmin); left: calc(41% + 12.5% - 90vmin); }
        62.5% { top: calc(38% + 16.67% - 90vmin); left: calc(45% + 12.5% - 90vmin); }
        75% { top: calc(55% + 16.67% - 90vmin); left: calc(51% + 12.5% - 90vmin); }
        87.5% { top: calc(55% + 16.67% - 90vmin); left: calc(43% + 12.5% - 90vmin); }
        100% { top: calc(50% + 16.67% - 90vmin); left: calc(48% + 12.5% - 90vmin); }
      }

      @keyframes access-orbit-clockwise {
        0% { transform: translate(calc(33vw - 90vmin), calc(40vh - 90vmin)) rotate(0deg) translateX(120px) rotate(0deg); }
        100% { transform: translate(calc(33vw - 90vmin), calc(40vh - 90vmin)) rotate(360deg) translateX(120px) rotate(-360deg); }
      }

      @keyframes access-orbit-clockwise-rev {
        0% { transform: translate(calc(33vw - 90vmin), calc(40vh - 90vmin)) rotate(0deg) translateX(120px) rotate(0deg); }
        100% { transform: translate(calc(33vw - 90vmin), calc(40vh - 90vmin)) rotate(-360deg) translateX(120px) rotate(360deg); }
      }

      @keyframes access-orbit-vertical {
        0% { top: 10%; left: 3%; }
        50% { top: 70%; left: 3%; }
        100% { top: 10%; left: 3%; }
      }

      :global(body.access-lock) {
        overflow: hidden !important;
      }
    </style>

    <script is:inline>
      const OVERLAY_ID = 'access-confirmation-overlay';
      const CONFIG_ID = 'access-confirmation-config';
      const ACCEPT_KEY = 'novaAminoAccessConfirmed';
      const ACCEPT_AT_KEY = 'novaAminoAccessConfirmedAt';
      const DEFAULT_REMEMBER_MS = 2592000000;
      const DEFAULT_DECLINE_URL = 'https://www.google.com';
      const LOCK_CLASS = 'access-lock';

      const ready = (fn) => {
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', fn, { once: true });
        } else {
          fn();
        }
      };

      ready(() => {
        const overlay = document.getElementById(OVERLAY_ID);
        if (!overlay) return;

        const configEl = document.getElementById(CONFIG_ID);
        let config = {};
        try {
          config = configEl?.textContent ? JSON.parse(configEl.textContent) : {};
        } catch (error) {
          console.warn('Failed to parse access confirmation config', error);
        }

        const contentEl = overlay.querySelector('.access-content');
        const mainEl = overlay.querySelector('.access-main');
        const cardWrapperEl = overlay.querySelector('.access-card');
        const cardSurfaceEl = overlay.querySelector('.access-card-surface');
        const textEl = overlay.querySelector('.access-text');
        const titleEl = overlay.querySelector('.access-title');
        const questionEl = overlay.querySelector('.access-question');
        const confirmBtn = overlay.querySelector('[data-action="confirm"]');
        const exitBtn = overlay.querySelector('[data-action="exit"]');
        const langButtons = Array.from(overlay.querySelectorAll('.access-lang-option'));
        const langSwitch = overlay.querySelector('.access-lang-switch');
        const header = overlay.querySelector('.access-header');
        const logoMeasure = overlay.querySelector('.access-logo-measure');

        const rememberForMs = typeof config.rememberForMs === 'number' && Number.isFinite(config.rememberForMs)
          ? Math.max(0, config.rememberForMs)
          : DEFAULT_REMEMBER_MS;

        const declineUrl = typeof config.declineRedirectUrl === 'string' && config.declineRedirectUrl.length
          ? config.declineRedirectUrl
          : DEFAULT_DECLINE_URL;

        const successUrl = typeof config.successRedirectUrl === 'string' ? config.successRedirectUrl : '';

        const setDataset = (active) => {
          overlay.dataset.active = active ? 'true' : 'false';
          overlay.setAttribute('aria-hidden', active ? 'false' : 'true');
        };

        const applyLanguage = (language) => {
          if (!language) return;
          if (titleEl) titleEl.textContent = language.title || '';
          if (questionEl) questionEl.textContent = language.question || '';
          if (textEl && Array.isArray(language.paragraphs)) {
            textEl.innerHTML = language.paragraphs.join('');
          }
          if (confirmBtn) confirmBtn.textContent = language.acceptButtonLabel || confirmBtn.textContent;
          if (exitBtn) exitBtn.textContent = language.declineButtonLabel || exitBtn.textContent;
        };

        const setLanguage = (button, langCode) => {
          const language = Array.isArray(config.languages)
            ? config.languages.find((entry) => entry.langCode === langCode) || config.languages[0]
            : null;

          langButtons.forEach((btn) => {
            const isActive = btn === button;
            btn.classList.toggle('access-lang-active', isActive);
            btn.setAttribute('aria-selected', String(isActive));
            btn.tabIndex = isActive ? 0 : -1;
          });

          if (language) {
            applyLanguage(language);
            if (language.langCode) {
              document.documentElement.setAttribute('lang', language.langCode);
              try {
                localStorage.setItem('novaAminoLang', language.langCode);
              } catch (error) {
                // ignore storage issues
              }
            }
          }
        };

        const storedLang = (() => {
          try {
            return localStorage.getItem('novaAminoLang');
          } catch (error) {
            return null;
          }
        })();

        const initialLangCode = Array.isArray(config.languages)
          ? (config.languages.find((entry) => entry.langCode === storedLang)?.langCode
              || (typeof config.defaultLanguage === 'string' ? config.defaultLanguage : config.languages[0]?.langCode))
          : null;

        const initialButton = langButtons.find((btn) => btn.dataset.lang === initialLangCode) || langButtons[0];
        if (initialButton) {
          setLanguage(initialButton, initialButton.dataset.lang);
        } else if (Array.isArray(config.languages) && config.languages[0]) {
          applyLanguage(config.languages[0]);
        }

        langButtons.forEach((button) => {
          button.addEventListener('click', () => setLanguage(button, button.dataset.lang));
          button.addEventListener('keydown', (event) => {
            if (event.key === 'Enter' || event.key === ' ') {
              event.preventDefault();
              setLanguage(button, button.dataset.lang);
            }

            if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') {
              event.preventDefault();
              const index = langButtons.indexOf(button);
              const nextIndex = event.key === 'ArrowRight'
                ? (index + 1) % langButtons.length
                : (index - 1 + langButtons.length) % langButtons.length;
              const nextButton = langButtons[nextIndex];
              setLanguage(nextButton, nextButton.dataset.lang);
              nextButton.focus();
            }
          });
        });

        const hasValidAcceptance = () => {
          try {
            const stored = localStorage.getItem(ACCEPT_KEY);
            if (stored !== 'true') return false;

            if (!rememberForMs) return true;

            const storedAt = localStorage.getItem(ACCEPT_AT_KEY);
            if (!storedAt) return true;

            const timestamp = Date.parse(storedAt);
            if (Number.isNaN(timestamp)) return true;

            if (Date.now() - timestamp <= rememberForMs) {
              return true;
            }

            localStorage.removeItem(ACCEPT_KEY);
            localStorage.removeItem(ACCEPT_AT_KEY);
            return false;
          } catch (error) {
            return false;
          }
        };

        const alignLanguages = () => {
          if (!langSwitch || !logoMeasure || !header || !contentEl) return;
          const contentRect = contentEl.getBoundingClientRect();
          const measureRect = logoMeasure.getBoundingClientRect();

          if (!contentRect.width || !measureRect.width) return;

          const switchHeight = langSwitch.offsetHeight || parseFloat(window.getComputedStyle(langSwitch).height) || 48;
          const top = (measureRect.top - contentRect.top) + (measureRect.height - switchHeight) / 2;
          const verticalNudge = -5;
          header.style.top = `${Math.max(0, Math.round(top) + verticalNudge)}px`;

          const rightPadding = Math.round(measureRect.left - contentRect.left);
          const bleedCompensation = 10;
          const userNudge = 70;
          header.style.right = `${Math.max(0, rightPadding + bleedCompensation + userNudge)}px`;
        };

        const updateHorizontalPadding = () => {
          if (!contentEl || !mainEl) return;

          const contentRect = contentEl.getBoundingClientRect();
          const cardRect = (cardSurfaceEl || cardWrapperEl)?.getBoundingClientRect();

          if (!contentRect.width || !cardRect?.width) return;

          const minPad = 32;
          const leftOffset = Math.max(minPad, Math.round(cardRect.left - contentRect.left));
          const rightOffset = Math.max(minPad, Math.round(contentRect.right - cardRect.right));

          contentEl.style.setProperty('--access-pad-left', `${leftOffset}px`);
          contentEl.style.setProperty('--access-pad-right', `${rightOffset}px`);
        };

        const resizeObservers = [];

        if (window.ResizeObserver) {
          const observer = new ResizeObserver(() => alignLanguages());
          if (contentEl) observer.observe(contentEl);
          if (logoMeasure) observer.observe(logoMeasure);
          resizeObservers.push(observer);
        }

        if (window.ResizeObserver) {
          const observer = new ResizeObserver(() => updateHorizontalPadding());
          if (contentEl) observer.observe(contentEl);
          if (cardSurfaceEl) observer.observe(cardSurfaceEl);
          else if (cardWrapperEl) observer.observe(cardWrapperEl);
          resizeObservers.push(observer);
        }

        window.addEventListener('resize', alignLanguages);
        window.addEventListener('orientationchange', alignLanguages);
        window.addEventListener('resize', updateHorizontalPadding);
        window.addEventListener('orientationchange', updateHorizontalPadding);

        window.requestAnimationFrame(() => {
          alignLanguages();
          updateHorizontalPadding();
        });

        const cleanup = () => {
          window.removeEventListener('resize', alignLanguages);
          window.removeEventListener('orientationchange', alignLanguages);
          window.removeEventListener('resize', updateHorizontalPadding);
          window.removeEventListener('orientationchange', updateHorizontalPadding);
          document.body.classList.remove(LOCK_CLASS);
          resizeObservers.forEach((observer) => observer.disconnect());
          resizeObservers.length = 0;
        };

        const hideOverlay = ({ persist }) => {
          setDataset(false);
          cleanup();

          window.setTimeout(() => {
            overlay.remove();
            if (persist) {
              if (successUrl) {
                window.location.href = successUrl;
              }
            }
          }, 400);

          if (persist) {
            try {
              localStorage.setItem(ACCEPT_KEY, 'true');
              localStorage.setItem(ACCEPT_AT_KEY, new Date().toISOString());
            } catch (error) {
              console.warn('Unable to persist access confirmation', error);
            }
          }
        };

        if (hasValidAcceptance()) {
          setDataset(false);
          cleanup();
          window.requestAnimationFrame(() => overlay.remove());
          return;
        }

        setDataset(true);
        document.body.classList.add(LOCK_CLASS);

        confirmBtn?.addEventListener('click', () => hideOverlay({ persist: true }));

        exitBtn?.addEventListener('click', () => {
          if (declineUrl) {
            window.location.href = declineUrl;
            return;
          }

          if (window.history.length > 1) {
            window.history.back();
          } else {
            window.location.href = DEFAULT_DECLINE_URL;
          }
        });

        overlay.addEventListener('keydown', (event) => {
          if (event.key === 'Escape') {
            hideOverlay({ persist: false });
          }
        });

        document.addEventListener('visibilitychange', () => {
          if (document.visibilityState === 'hidden') {
            resizeObservers.forEach((observer) => observer.disconnect());
          }
        }, { once: true });
      });
    </script>
  </>
)}
