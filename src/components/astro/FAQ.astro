---
interface Props {
  faq?: {
    enabled?: boolean
    title?: string
    sections?: Array<{
      sectionTitle: string
      questions: Array<{
        question: string
        answer: string
        slug?: string
      }>
    }>
  }
}

const { faq } = Astro.props

// Don't render if disabled or no sections
if (!faq?.enabled || !faq?.sections?.length) {
  return null
}

const {
  title = "Frequently Asked Questions",
  sections = []
} = faq
---

<section class="container" style="padding-block: var(--space-8);" id="faq">
      {title && (
        <h2 class="heading" style="font-family: var(--font-heading); font-weight: 700; font-size: clamp(2.25rem, 4.5vw, 3.2rem); line-height: 1.2; margin: 0 0 var(--space-5); color: #000; text-align: center;">
          {title}
        </h2>
      )}

      {sections.map((section, sectionIndex) => (
        <div class="faq-section" style="margin-bottom: var(--space-4); border: 1px solid #e5e7eb; border-radius: 8px; overflow: hidden;">
          <button
            class="faq-section-header"
            data-section-index={sectionIndex}
            style="width: 100%; padding: var(--space-4); background: #f9fafb; border: none; text-align: left; cursor: pointer; display: flex; justify-content: space-between; align-items: center; font-size: 1.25rem; font-weight: 600; color: #374151; transition: background-color 0.2s;"
            onclick="handleFaqSectionToggle(event)"
          >
            <span>{section.sectionTitle}</span>
            <svg class="faq-chevron" width="20" height="20" viewBox="0 0 20 20" fill="currentColor" style="transition: transform 0.2s;">
              <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
          </button>

          <div class="faq-section-content" data-section-index={sectionIndex} style="display: none; padding: 0;">
            {section.questions.map(item => (
              <details id={`faq-${item.slug || ''}`} class="faq-details" style="margin: 0; border-top: 1px solid #e5e7eb;">
                <summary class="faq-summary" style="padding: var(--space-3); cursor: pointer; font-weight: 500; background: white; display: flex; justify-content: space-between; align-items: center; list-style: none;">
                  <span>{item.question}</span>
                  <svg class="faq-question-chevron" width="16" height="16" viewBox="0 0 20 20" fill="currentColor" style="transition: transform 0.2s; color: #9ca3af; flex-shrink: 0; margin-left: 12px;">
                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                  </svg>
                </summary>
                <div class="faq-content" style="padding: var(--space-3); color: var(--muted); line-height: 1.6; background: #fafafa;">
                  {item.answer}
                </div>
              </details>
            ))}
          </div>
        </div>
      ))}
</section>

<style>
  /* Fix details element behavior */
  .faq-details {
    overflow: hidden;
  }

  .faq-summary {
    position: relative;
  }

  .faq-summary::-webkit-details-marker {
    display: none;
  }

  .faq-summary::marker {
    display: none;
  }

  .faq-details[open] .faq-content {
    animation: slideDown 0.2s ease-out;
  }

  .faq-details:not([open]) .faq-content {
    display: none;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  function handleFaqSectionToggle(event) {
    const button = event.currentTarget;
    const sectionIndex = button.getAttribute('data-section-index');
    const content = document.querySelector(`[data-section-index="${sectionIndex}"].faq-section-content`);
    const chevron = button.querySelector('.faq-chevron');

    if (content.style.display === 'none' || content.style.display === '') {
      content.style.display = 'block';
      chevron.style.transform = 'rotate(180deg)';
      button.style.backgroundColor = '#f3f4f6';
    } else {
      content.style.display = 'none';
      chevron.style.transform = 'rotate(0deg)';
      button.style.backgroundColor = '#f9fafb';
    }
  }

  // Make sure the function is available globally
  window.handleFaqSectionToggle = handleFaqSectionToggle;

  // Handle individual question chevrons
  document.addEventListener('DOMContentLoaded', function() {
    const details = document.querySelectorAll('.faq-details');
    details.forEach(detail => {
      const chevron = detail.querySelector('.faq-question-chevron');
      if (chevron) {
        detail.addEventListener('toggle', function() {
          if (detail.open) {
            chevron.style.transform = 'rotate(180deg)';
          } else {
            chevron.style.transform = 'rotate(0deg)';
          }
        });
      }
    });
  });
</script>